package com.demo.main.utils;

import java.lang.reflect.Field;
import java.sql.Date;
import java.sql.*;
import java.util.*;

public class JDBCUtil {
    private static final int MYSQL_VERSION = 8;
    private static final String DRIVER_CLASS_NAME;
    private static final String URL;
    private static final String USERNAME = "root";
    private static final String PASSWORD = "123456";
    private static final boolean AUTO_COMMIT = true;
    private static final int PAGE_SIZE = 5;
    private static final boolean printSQLEnabled = false;

    private static Connection conn;
    private static PreparedStatement preparedStatement;
    private static ResultSet resultSet;

    private final String tableName;
    private final String primaryKeyColumn;

    static {
        Map<Integer, Map<String, String>> mysqlVersionMap = new HashMap<>(2);
        String databaseName = "java_web_book";

        mysqlVersionMap.put(8, new HashMap<String, String>() {{
            put("driver", "com.mysql.cj.jdbc.Driver");
            put("url", "jdbc:mysql://localhost:3306/" + databaseName + "?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&tinyInt1isBit=true&rewriteBatchedStatements=true");
        }});

        DRIVER_CLASS_NAME = mysqlVersionMap.get(MYSQL_VERSION).get("driver");
        URL = mysqlVersionMap.get(MYSQL_VERSION).get("url");

        try {
            Class.forName(DRIVER_CLASS_NAME);
            conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            conn.setAutoCommit(AUTO_COMMIT);
        } catch (ClassNotFoundException | SQLException e) {
            System.err.println("初始化数据库连接失败: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public JDBCUtil(String tableName, String primaryKeyColumn) {
        this.tableName = tableName;
        this.primaryKeyColumn = primaryKeyColumn;
    }

    @FunctionalInterface
    private interface SQLExecutor<T> {
        T execute(PreparedStatement ps) throws SQLException;
    }

    private static <T> T executeSQL(String sql, SQLExecutor<T> executor, Object... params) {
        try {
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            preparedStatement = conn.prepareStatement(sql);
            for (int i = 0; i < params.length; i++) {
                preparedStatement.setObject(i + 1, typeof(params[i]));
            }

            // 打印SQL语句
            if (printSQLEnabled) {
                System.out.println("Executing SQL: " + sql);
                System.out.println("Parameters: " + String.join(", ", Arrays.toString(params)));
            }

            return executor.execute(preparedStatement);
        } catch (SQLException e) {
            System.err.println("执行SQL失败: " + e.getMessage());
            e.printStackTrace();
            rollback(conn);
            return null;
        }
    }

    public static ResultSet query(String SQL, Object... params) {
        if (SQL == null || SQL.trim().isEmpty() || !SQL.trim().toLowerCase().startsWith("select")) {
            throw new IllegalArgumentException("SQL语句为空或非查询语句");
        }

        return executeSQL(SQL, ps -> {
            if (resultSet != null) {
                resultSet.close();
            }
            resultSet = ps.executeQuery();
            return resultSet;
        }, params);
    }

    public static boolean execute(String SQL, Object... params) {
        if (SQL == null || SQL.trim().isEmpty() || SQL.trim().toLowerCase().startsWith("select")) {
            throw new IllegalArgumentException("SQL语句为空或有错");
        }
        Boolean result = executeSQL(SQL, ps -> {
            ps.executeUpdate();
            commit(conn);
            return true;
        }, params);
        return result != null && result;
    }

    public static int insert(String SQL, boolean autoGeneratedKeys, Object... params) {
        if (SQL == null || SQL.trim().isEmpty() || !SQL.trim().toLowerCase().startsWith("insert")) {
            throw new IllegalArgumentException("SQL语句为空或非插入语句");
        }
        Integer result = executeSQL(SQL, ps -> {
            int updateCount = ps.executeUpdate();
            if (autoGeneratedKeys && updateCount > 0) {
                try (ResultSet rs = ps.getGeneratedKeys()) {
                    if (rs.next()) {
                        return rs.getInt(1);
                    }
                }
            }
            return autoGeneratedKeys ? 0 : updateCount;
        }, params);
        return result != null ? result : -1;  // 如果执行失败返回-1
    }

    private static Object typeof(Object o) {
        if (o instanceof Timestamp) {
            return o;
        }
        if (o instanceof java.util.Date) {
            return new Date(((java.util.Date) o).getTime());
        }
        if (o instanceof Character) {
            return String.valueOf(o);
        }
        return o;
    }

    private static void commit(Connection c) {
        if (c != null) {
            try {
                if (!c.getAutoCommit()) {
                    c.commit();
                }
            } catch (SQLException e) {
                System.err.println("提交事务失败: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private static void rollback(Connection c) {
        if (c != null) {
            try {
                if (!c.getAutoCommit()) {
                    c.rollback();
                }
            } catch (SQLException e) {
                System.err.println("回滚事务失败: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    public static void close() {
        try {
            if (resultSet != null) {
                resultSet.close();
            }
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException e) {
            System.err.println("关闭数据库资源失败: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static String camelToSnake(String camelCaseStr) {
        StringBuilder snakeCaseStr = new StringBuilder();
        for (int i = 0; i < camelCaseStr.length(); i++) {
            char c = camelCaseStr.charAt(i);
            if (Character.isUpperCase(c)) {
                if (i > 0) {
                    snakeCaseStr.append('_');
                }
                snakeCaseStr.append(Character.toLowerCase(c));
            } else {
                snakeCaseStr.append(c);
            }
        }
        return snakeCaseStr.toString();
    }

    public ResultSet selectByPage(int page) {
        if (page <= 0) {
            throw new IllegalArgumentException("页码必须大于0");
        }
        String SQL = "SELECT * FROM " + tableName + " LIMIT ?, ?";
        int offset = (page - 1) * PAGE_SIZE;
        return query(SQL, offset, PAGE_SIZE);
    }

    public boolean deleteById(Object id) {
        String SQL = "DELETE FROM " + tableName + " WHERE " + primaryKeyColumn + " = ?";
        return execute(SQL, id);
    }

    public boolean updateByColumn(Object id, String column, Object newValue) {
        String SQL = "UPDATE " + tableName + " SET " + column + " = ? WHERE " + primaryKeyColumn + " = ?";
        return execute(SQL, newValue, id);
    }

    public boolean updateSelective(Object entity) {
        StringBuilder SQL = new StringBuilder("UPDATE " + tableName + " SET ");
        List<Object> params = new ArrayList<>();

        Field[] fields = entity.getClass().getDeclaredFields();
        Field primaryKeyField = null;

        for (Field field : fields) {
            if (field.getName().equals("serialVersionUID")) continue;
            field.setAccessible(true);
            try {
                Object value = field.get(entity);
                if (value != null) {
                    if (camelToSnake(field.getName()).equals(primaryKeyColumn)) {
                        primaryKeyField = field;
                    } else {
                        SQL.append(camelToSnake(field.getName())).append(" = ?,");
                        params.add(value);
                    }
                }
            } catch (IllegalAccessException e) {
                System.err.println("访问字段失败: " + e.getMessage());
                e.printStackTrace();
                return false;
            }
        }

        if (params.isEmpty()) {
            return false;
        }

        SQL.setLength(SQL.length() - 1);
        SQL.append(" WHERE ").append(primaryKeyColumn).append(" = ?");

        if (primaryKeyField == null) {
            System.err.println("未找到主键字段 the primary key field was not found");
            return false;
        }

        try {
            params.add(primaryKeyField.get(entity));
        } catch (IllegalAccessException e) {
            System.err.println("访问主键字段失败: " + e.getMessage());
            e.printStackTrace();
            return false;
        }

        return execute(SQL.toString(), params.toArray());
    }

    public ResultSet selectAll() {
        String SQL = "SELECT * FROM " + tableName;
        return query(SQL);
    }

    public ResultSet selectById(Object id) {
        String SQL = "SELECT * FROM " + tableName + " WHERE " + primaryKeyColumn + " = ?";
        return query(SQL, id);
    }

    public ResultSet selectByColumn(String column, Object value) {
        String SQL = "SELECT * FROM " + tableName + " WHERE " + column + " = ?";
        return query(SQL, value);
    }

    private StringBuilder buildSelectSQL(Object entity, boolean isSelective) {
        StringBuilder SQL = new StringBuilder("SELECT * FROM ").append(tableName);
        Field[] fields = entity.getClass().getDeclaredFields();
        List<String> conditions = new ArrayList<>();

        for (Field field : fields) {
            if (field.getName().equals("serialVersionUID")) continue;
            field.setAccessible(true);
            try {
                Object value = field.get(entity);
                if (value != null || !isSelective) {
                    conditions.add(camelToSnake(field.getName()) + " = ?");
                }
            } catch (IllegalAccessException e) {
                System.err.println("访问字段失败: " + e.getMessage());
                e.printStackTrace();
            }
        }

        if (!conditions.isEmpty()) {
            SQL.append(" WHERE ");
            SQL.append(String.join(" AND ", conditions));
        }

        return SQL;
    }

    private List<Object> getEntityFieldValues(Object entity, boolean includeNullValues) {
        List<Object> params = new ArrayList<>();
        Field[] fields = entity.getClass().getDeclaredFields();

        for (Field field : fields) {
            if (field.getName().equals("serialVersionUID")) continue;
            field.setAccessible(true);
            try {
                Object value = field.get(entity);
                if (value != null || includeNullValues) {
                    params.add(value);
                }
            } catch (IllegalAccessException e) {
                System.err.println("访问字段失败: " + e.getMessage());
                e.printStackTrace();
            }
        }
        return params;
    }

    public ResultSet selectByEntity(Object entity) {
        StringBuilder SQL = buildSelectSQL(entity, false);
        List<Object> params = getEntityFieldValues(entity, true);
        return query(SQL.toString(), params.toArray());
    }

    public ResultSet selectSelective(Object entity) {
        StringBuilder SQL = buildSelectSQL(entity, true);
        List<Object> params = getEntityFieldValues(entity, false);

        if (params.isEmpty()) {
            // 如果没有参数，返回所有记录
            return selectAll();
        }

        return query(SQL.toString(), params.toArray());
    }

    public boolean deleteByIds(List<Object> ids) {
        StringBuilder SQL = new StringBuilder("DELETE FROM " + tableName + " WHERE " + primaryKeyColumn + " IN (");
        for (int i = 0; i < ids.size(); i++) {
            SQL.append("?,");
        }
        SQL.deleteCharAt(SQL.length() - 1).append(")");
        return execute(SQL.toString(), ids.toArray());
    }

    public boolean insertSelective(Object entity) {
        StringBuilder SQL = new StringBuilder("INSERT INTO " + tableName + " (");
        StringBuilder values = new StringBuilder("VALUES (");
        List<Object> params = new ArrayList<>();

        Field[] fields = entity.getClass().getDeclaredFields();
        for (Field field : fields) {
            if (field.getName().equals("serialVersionUID")) continue;
            field.setAccessible(true);
            try {
                Object value = field.get(entity);
                if (value != null) {
                    SQL.append(camelToSnake(field.getName())).append(",");
                    values.append("?,");
                    params.add(value);
                }
            } catch (IllegalAccessException e) {
                System.err.println("访问字段失败: " + e.getMessage());
                e.printStackTrace();
            }
        }

        if (params.isEmpty()) {
            return false;
        }

        SQL.setLength(SQL.length() - 1);
        values.setLength(values.length() - 1);
        SQL.append(") ").append(values).append(")");

        return insert(SQL.toString(), false, params.toArray()) > 0;
    }

    // 模糊查询
    public ResultSet selectLike(String column, String pattern) {
        if (column == null || column.trim().isEmpty() || pattern == null) {
            throw new IllegalArgumentException("列名和模式不能为空");
        }
        String SQL = "SELECT * FROM " + tableName + " WHERE " + column + " LIKE ?";
        return query(SQL, "%" + pattern + "%");
    }

    // 排序查询
    public ResultSet selectOrderBy(String orderByColumn, boolean isAsc) {
        if (orderByColumn == null || orderByColumn.trim().isEmpty()) {
            throw new IllegalArgumentException("排序列名不能为空");
        }
        String SQL = "SELECT * FROM " + tableName + " ORDER BY " + orderByColumn + (isAsc ? " ASC" : " DESC");
        return query(SQL);
    }

    // 统计查询
    public long count() {
        String SQL = "SELECT COUNT(*) FROM " + tableName;
        ResultSet rs = query(SQL);
        try {
            if (rs.next()) {
                return rs.getLong(1);
            }
        } catch (SQLException e) {
            System.err.println("执行count查询失败: " + e.getMessage());
            e.printStackTrace();
        }
        return -1; // 表示查询失败
    }

    public long countDistinct(String column) {
        if (column == null || column.trim().isEmpty()) {
            throw new IllegalArgumentException("列名不能为空");
        }
        String SQL = "SELECT COUNT(DISTINCT " + column + ") FROM " + tableName;
        ResultSet rs = query(SQL);
        try {
            if (rs.next()) {
                return rs.getLong(1);
            }
        } catch (SQLException e) {
            System.err.println("执行countDistinct查询失败: " + e.getMessage());
            e.printStackTrace();
        }
        return -1; // 表示查询失败
    }

    // 分页查询结合排序
    public ResultSet selectByPageAndOrder(int page, String orderByColumn, boolean isAsc) {
        if (page <= 0) {
            throw new IllegalArgumentException("页码必须大于0");
        }
        if (orderByColumn == null || orderByColumn.trim().isEmpty()) {
            throw new IllegalArgumentException("排序列名不能为空");
        }
        String SQL = "SELECT * FROM " + tableName + " ORDER BY " + orderByColumn +
                (isAsc ? " ASC" : " DESC") + " LIMIT ?, ?";
        int offset = (page - 1) * PAGE_SIZE;
        return query(SQL, offset, PAGE_SIZE);
    }

    // 执行原生SQL
    public ResultSet executeRawSQL(String sql, Object... params) {
        if (sql == null || sql.trim().isEmpty()) {
            throw new IllegalArgumentException("SQL语句不能为空");
        }
        return query(sql, params);
    }

    // 查询全部并反转结果的方法
    public ResultSet selectAllReversed() {
        return selectDescById();
    }

    // 按主键降序排列的方法
    public ResultSet selectDescById() {
        String SQL = "SELECT * FROM " + tableName + " ORDER BY " + primaryKeyColumn + " DESC";
        return query(SQL);
    }

    public ResultSet selectAllDescByEntity(Object entity) {
        StringBuilder SQL = new StringBuilder("SELECT * FROM ").append(tableName);
        List<Object> params = new ArrayList<>();
        Field[] fields = entity.getClass().getDeclaredFields();
        List<String> conditions = new ArrayList<>();

        for (Field field : fields) {
            if (field.getName().equals("serialVersionUID")) continue;
            field.setAccessible(true);
            try {
                Object value = field.get(entity);
                if (value != null) {
                    conditions.add(camelToSnake(field.getName()) + " = ?");
                    params.add(value);
                }
            } catch (IllegalAccessException e) {
                System.err.println("访问字段失败: " + e.getMessage());
                e.printStackTrace();
            }
        }

        if (!conditions.isEmpty()) {
            SQL.append(" WHERE ");
            SQL.append(String.join(" AND ", conditions));
        }

        SQL.append(" ORDER BY ").append(primaryKeyColumn).append(" DESC");

        return query(SQL.toString(), params.toArray());
    }

    public enum Operator {
        EQUALS, LIKE, LIKE_START, LIKE_END
    }

    /**

         public List<BookVo> selectBookVoCondition(String author, String name, String typeName) {

             String sql = "SELECT book.id, book.`name`, book.author, book.publisher, book.isbn, book.info, book.pricing, book.is_borrowed, book_type.id as 'book_type_id', book_type.`name` as 'book_type_name' FROM book, book_type, book_book_type WHERE book.id = book_book_type.book_id AND book_type.id = book_book_type.book_type_id";

             Map<String, Object> params = new HashMap<>();
             params.put("author", Collections.singletonMap(author, Operator.LIKE));
             params.put("book.name", Collections.singletonMap(name, Operator.LIKE));
             params.put("book_type.name", typeName);

             Map<String, Boolean> orderBy = new LinkedHashMap<>();
             orderBy.put("book.id", false);

         return ResultSetUtil.mapToList(JDBCUtil.executeConditionalQueryWithOrder(sql, params, orderBy), BookVo.class);
     }

     */

    public static ResultSet executeConditionalQuery(String baseSql, Map<String, Object> conditions) {
        return executeConditionalQueryWithOrder(baseSql, conditions, null);
    }

    public static ResultSet executeConditionalQueryWithOrder(String baseSql, Map<String, Object> conditions, Map<String, Boolean> orderBy) {
        if (baseSql == null || baseSql.trim().isEmpty()) {
            throw new IllegalArgumentException("基础SQL语句不能为空");
        }

        StringBuilder sqlBuilder = new StringBuilder(baseSql);
        List<Object> params = new ArrayList<>();
        boolean whereClauseAdded = baseSql.toLowerCase().contains("where");

        if (conditions != null && !conditions.isEmpty()) {
            for (Map.Entry<String, Object> entry : conditions.entrySet()) {
                String column = entry.getKey();
                Object value = entry.getValue();

                if (isValidValue(value)) {
                    if (value instanceof Map) {
                        @SuppressWarnings("unchecked")
                        Map<Object, Operator> conditionMap = (Map<Object, Operator>) value;
                        Map.Entry<Object, Operator> conditionEntry = conditionMap.entrySet().iterator().next();
                        Object conditionValue = conditionEntry.getKey();
                        Operator operator = conditionEntry.getValue();

                        if (operator == Operator.LIKE && (conditionValue == null || conditionValue.toString().isEmpty())) {
                            continue;
                        }

                        if (!whereClauseAdded) {
                            sqlBuilder.append(" WHERE ");
                            whereClauseAdded = true;
                        } else {
                            sqlBuilder.append(" AND ");
                        }

                        switch (operator) {
                            case LIKE:
                                sqlBuilder.append(column).append(" LIKE ?");
                                params.add("%" + conditionValue + "%");
                                break;
                            case LIKE_START:
                                sqlBuilder.append(column).append(" LIKE ?");
                                params.add(conditionValue + "%");
                                break;
                            case LIKE_END:
                                sqlBuilder.append(column).append(" LIKE ?");
                                params.add("%" + conditionValue);
                                break;
                            case EQUALS:
                            default:
                                sqlBuilder.append(column).append(" = ?");
                                params.add(conditionValue);
                                break;
                        }
                    } else {
                        if (!whereClauseAdded) {
                            sqlBuilder.append(" WHERE ");
                            whereClauseAdded = true;
                        } else {
                            sqlBuilder.append(" AND ");
                        }
                        sqlBuilder.append(column).append(" = ?");
                        params.add(value);
                    }
                }
            }
        }

        if (orderBy != null && !orderBy.isEmpty()) {
            sqlBuilder.append(" ORDER BY ");
            List<String> orderClauses = new ArrayList<>();
            for (Map.Entry<String, Boolean> entry : orderBy.entrySet()) {
                orderClauses.add(entry.getKey() + (entry.getValue() ? " ASC" : " DESC"));
            }
            sqlBuilder.append(String.join(", ", orderClauses));
        }

        String finalSql = sqlBuilder.toString();

        // 打印SQL语句
//        if (printSQLEnabled) {
//            System.out.println("Executing SQL: " + finalSql);
//            System.out.println("Parameters: " + params);
//        }

        return query(finalSql, params.toArray());
    }

    private static boolean isValidValue(Object value) {
        if (value == null) {
            return false;
        }
        if (value instanceof String) {
            return !((String) value).trim().isEmpty();
        }
        if (value instanceof Map) {
            @SuppressWarnings("unchecked")
            Map<Object, Operator> map = (Map<Object, Operator>) value;
            if (map.isEmpty()) {
                return false;
            }
            Object key = map.keySet().iterator().next();
            return key != null && !(key instanceof String && ((String) key).trim().isEmpty());
        }
        return true;
    }

    private static String sanitizeColumnName(String columnName) {
        // 简单的列名清理，只允许字母、数字、下划线和点
        if (!columnName.matches("^[a-zA-Z0-9_\\.]+$")) {
            throw new IllegalArgumentException("无效的列名: " + columnName);
        }
        return columnName;
    }
}